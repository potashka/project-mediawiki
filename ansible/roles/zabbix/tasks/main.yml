# roles/zabbix/tasks/main.yml
---
# Установка PostgreSQL для Zabbix, самого Zabbix, настройка бэкапов и Web Scenario/триггеров через Zabbix API
#  PostgreSQL + Zabbix

- name: Install PostgreSQL
  apt:
    name: postgresql
    state: present
    update_cache: yes

- name: Create PostgreSQL user for Zabbix
  become: true
  shell: |
    sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='zabbix'" | grep -q 1 || \
    sudo -u postgres psql -c "CREATE USER zabbix WITH PASSWORD 'zabbix';"
  args:
    executable: /bin/bash

- name: Create Zabbix database
  become: true
  shell: |
    sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw zabbix || \
    sudo -u postgres createdb -O zabbix -E UTF8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8 -T template0 zabbix
  args:
    executable: /bin/bash

- name: Ensure php-pgsql is installed
  apt:
    name: php-pgsql
    state: present
    update_cache: yes

# Репозиторий 6.0 для выбранной версии Ubuntu
- name: Install Zabbix 6.0 repo
  apt:
    deb: https://repo.zabbix.com/zabbix/6.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.0-4+ubuntu20.04_all.deb
    state: present

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install Zabbix server and frontend
  apt:
    name:
      - zabbix-server-pgsql
      - zabbix-frontend-php
      - zabbix-apache-conf
      - zabbix-sql-scripts
      - zabbix-agent
    state: present

#  Zabbix server конфиг (доступ к БД)
- name: Configure /etc/zabbix/zabbix_server.conf
  lineinfile:
    path: /etc/zabbix/zabbix_server.conf
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.val }}"
  loop:
    - { key: "DBHost",     val: "localhost" }
    - { key: "DBName",     val: "zabbix" }
    - { key: "DBUser",     val: "zabbix" }
    - { key: "DBPassword", val: "zabbix" }
  notify: Restart zabbix-server

# Detect PG version and allow unsupported for PG<13

- name: Detect PostgreSQL server version (numeric)
  become: true
  shell: sudo -u postgres psql -tAc "SHOW server_version_num;"
  register: pg_version_num
  changed_when: false
  failed_when: false

- name: Enable AllowUnsupportedDBVersions=1 for PG < 13
  lineinfile:
    path: /etc/zabbix/zabbix_server.conf
    regexp: '^AllowUnsupportedDBVersions='
    line: 'AllowUnsupportedDBVersions=1'
  when: (pg_version_num.stdout | int) < 130000
  notify: Restart zabbix-server

#  Zabbix WEB конфиг (zabbix.conf.php)
- name: Ensure /etc/zabbix/web exists
  file:
    path: /etc/zabbix/web
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Install /etc/zabbix/web/zabbix.conf.php
  copy:
    dest: /etc/zabbix/web/zabbix.conf.php
    owner: www-data
    group: www-data
    mode: '0640'
    content: |
      <?php
      // Auto-generated by Ansible
      $DB = array(
        'TYPE'     => 'POSTGRESQL',
        'SERVER'   => 'localhost',
        'PORT'     => '0',
        'DATABASE' => 'zabbix',
        'USER'     => 'zabbix',
        'PASSWORD' => 'zabbix',
      );
      $ZBX_SERVER      = 'localhost';
      $ZBX_SERVER_PORT = '10051';
      $ZBX_SERVER_NAME = 'Zabbix';
      $IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
  notify: Reload apache2

- name: Load initial Zabbix schema into DB (only if empty)
  become: true
  shell: |
    sudo -u postgres psql -d zabbix -tAc "SELECT 1 FROM pg_class WHERE relname='dbversion' AND relkind='r'" | grep -q 1 || \
    sudo -u postgres bash -c 'zcat /usr/share/zabbix-sql-scripts/postgresql/server.sql.gz | psql zabbix'
  args:
    executable: /bin/bash
  changed_when: false
  notify:
    - Restart zabbix-server
    - Reload apache2

# Fix Postgres privileges for Zabbix
- name: Grant full privileges on DB/schema/objects to role zabbix
  shell: |
    set -e
    sudo -u postgres psql -v ON_ERROR_STOP=1 -d zabbix -c "GRANT ALL PRIVILEGES ON DATABASE zabbix TO zabbix;"
    sudo -u postgres psql -v ON_ERROR_STOP=1 -d zabbix -c "ALTER SCHEMA public OWNER TO zabbix;"
    sudo -u postgres psql -v ON_ERROR_STOP=1 -d zabbix -c "GRANT ALL PRIVILEGES ON ALL TABLES    IN SCHEMA public TO zabbix;"
    sudo -u postgres psql -v ON_ERROR_STOP=1 -d zabbix -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO zabbix;"
    sudo -u postgres psql -v ON_ERROR_STOP=1 -d zabbix -c "GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO zabbix;"
    sudo -u postgres psql -v ON_ERROR_STOP=1 -d zabbix -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES    TO zabbix;"
    sudo -u postgres psql -v ON_ERROR_STOP=1 -d zabbix -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO zabbix;"
    sudo -u postgres psql -v ON_ERROR_STOP=1 -d zabbix -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO zabbix;"
  args:
    executable: /bin/bash
  changed_when: true
  notify:
    - Restart zabbix-server
    - Reload apache2

- name: Sanity | Check SELECT from users as role zabbix
  shell: |
    PGPASSWORD=zabbix psql -h 127.0.0.1 -U zabbix -d zabbix -tAc "SELECT 1 FROM users LIMIT 1"
  register: zbx_can_select_users
  changed_when: false
  failed_when: zbx_can_select_users.stdout | trim != "1"

# Стартуем всё кроме zabbix-server обычным способом
- name: Ensure base services are running
  service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - postgresql
    - apache2
    - zabbix-agent

# zabbix-server — отдельно, с диагностикой
- block:
    - name: Start zabbix-server
      service:
        name: zabbix-server
        state: started
        enabled: true

    # Опционально подождём порт демона (10051), чтобы убедиться, что он реально поднялся
    - name: Wait for zabbix-server port 10051
      wait_for:
        host: 127.0.0.1
        port: 10051
        delay: 1
        timeout: 20

  rescue:
    - name: Show last zabbix-server journal (80 lines)
      shell: "journalctl -u zabbix-server --no-pager -n 80 || true"
      register: zbx_journal
      changed_when: false

    - name: Show zabbix_server.log tail (if exists)
      shell: "tail -n 80 /var/log/zabbix/zabbix_server.log || true"
      register: zbx_srv_log
      changed_when: false

    - debug:
        msg: |
          --- journalctl ---
          {{ zbx_journal.stdout | default('') }}
          --- /var/log/zabbix/zabbix_server.log ---
          {{ zbx_srv_log.stdout | default('') }}

    - fail:
        msg: "zabbix-server не стартовал. См. логи выше."

#  SSH для бэкапов rsync

- name: Ensure /root/.ssh exists on backup host
  file:
    path: /root/.ssh
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Install private key for rsync (from control machine)
  copy:
    content: "{{ lookup('file', ansible_ssh_private_key_file) }}"
    dest: /root/.ssh/id_rsa
    owner: root
    group: root
    mode: '0600'

# Добавляем known_hosts корректно (сканим с backup-хоста)
- name: Ensure openssh-client is installed (for ssh-keyscan)
  apt:
    name: openssh-client
    state: present
    update_cache: yes

- name: Scan SSH host keys from backup host
  command: "ssh-keyscan -T 5 -t rsa,ecdsa,ed25519 {{ item }}"
  register: zbx_keyscan
  changed_when: false
  failed_when: false
  loop: "{{ backup_ssh_known_hosts | default([]) }}"
  when: backup_ssh_known_hosts | length > 0
  loop_control:
    label: "{{ item }}"

- name: Add scanned keys to known_hosts (only non-empty)
  known_hosts:
    path: /root/.ssh/known_hosts
    name: "{{ item.item }}"
    key: "{{ item.stdout }}"
    state: present
    hash_host: true
  loop: "{{ zbx_keyscan.results | selectattr('stdout','!=','') | list }}"
  loop_control:
    label: "{{ item.item }}"

- name: Warn if some hosts could not be scanned (skipped)
  debug:
    msg: "ssh-keyscan returned empty for: {{ bad_hosts | join(', ') }}"
  vars:
    bad_hosts: "{{ zbx_keyscan.results | selectattr('stdout','==','') | map(attribute='item') | list }}"
  when: zbx_keyscan is defined and (zbx_keyscan.results | selectattr('stdout','==','') | list | length) > 0

#  Бэкапы (FS + DB)

- name: Ensure rsync is installed (for FS backups)
  apt:
    name: rsync
    state: present
    update_cache: yes

- name: Create backup target directories
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /opt/backups/files
    - /opt/backups/db

- name: Upload backup scripts (templated)
  template:
    src: "{{ item.src }}"
    dest: "/usr/local/bin/{{ item.dest }}"
    mode: '0755'
  loop:
    - { src: "backup_fs.sh.j2", dest: "backup_fs.sh" }
    - { src: "backup_db.sh.j2", dest: "backup_db.sh" }

- name: Create cron jobs for backup scripts (daily 03:00)
  cron:
    name: "Daily {{ item.name }}"
    minute: "0"
    hour: "3"
    job: "/usr/local/bin/{{ item.script }}"
  loop:
    - { name: "filesystem backup", script: "backup_fs.sh" }
    - { name: "database backup",  script: "backup_db.sh" }

#  Zabbix API (Web Scenario)

# Ждём именно API endpoint, а не просто корень /zabbix/
- name: Wait until Zabbix API is reachable (200)
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "user.checkAuthentication"
      params: {}
      id: 0
    status_code: 200
    return_content: yes
  register: zbx_api_ping
  retries: 30
  delay: 5
  until: zbx_api_ping.status == 200 and (zbx_api_ping.json is defined)
  changed_when: false

- name: Zabbix API | Login and get auth token
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "user.login"
      params:
        user: "{{ zabbix_api_user }}"
        password: "{{ zabbix_api_password }}"
      id: 1
    status_code: 200
  register: zbx_login
  changed_when: false

- name: Extract auth token and fail early if missing
  set_fact:
    zbx_auth_token: "{{ zbx_login.json.result | default('') }}"

# - debug:
#     var: zbx_login
#   when: zbx_auth_token == ''

- name: Fail if login did not return token
  fail:
    msg: >-
      Zabbix API login failed: no token. Проверь {{ zabbix_api_url }} (должен оканчиваться на /zabbix),
      учетные данные и заголовок Content-Type.
  when: zbx_auth_token == ''

# Ensure Zabbix host for web scenario exists
- name: Set default hostgroup name (for nginx-lb)
  set_fact:
    zbx_hostgroup_name: "{{ zbx_hostgroup_name | default('MediaWiki') }}"

# 1) hostgroup.get / create
- name: Zabbix API | Get host group {{ zbx_hostgroup_name }}
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers: { Content-Type: "application/json-rpc" }
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "hostgroup.get"
      params:
        output: ["groupid","name"]
        filter:
          name: ["{{ zbx_hostgroup_name }}"]
      auth: "{{ zbx_auth_token }}"
      id: 10
    status_code: 200
  register: zbx_grp
  changed_when: false

- name: Zabbix API | Create host group if missing
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers: { Content-Type: "application/json-rpc" }
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "hostgroup.create"
      params:
        name: "{{ zbx_hostgroup_name }}"
      auth: "{{ zbx_auth_token }}"
      id: 11
    status_code: 200
  register: zbx_grp_create
  when: zbx_grp.json.result | length == 0

- name: Set fact groupid
  set_fact:
    zbx_groupid: >-
      {{ (zbx_grp.json.result | first).groupid
         if (zbx_grp.json.result | length) > 0
         else zbx_grp_create.json.result.groupids[0] }}

# 2) Пробуем получить хост по internal name (поле `host`)
- name: Zabbix API | Get host {{ zabbix_http_check_host }}
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers: { Content-Type: "application/json-rpc" }
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "host.get"
      params:
        output: ["hostid","host","name"]
        filter:
          host: ["{{ zabbix_http_check_host }}"]
      auth: "{{ zbx_auth_token }}"
      id: 12
    status_code: 200
  register: zbx_host_try
  changed_when: false

# 3) Если нет — создаём минимальный хост с агентным интерфейсом на IP nginx-lb
- name: Zabbix API | Create host {{ zabbix_http_check_host }} if missing
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers: { Content-Type: "application/json-rpc" }
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "host.create"
      params:
        host: "{{ zabbix_http_check_host }}"      # internal name
        name: "{{ zabbix_http_check_host }}"      # visible name (можно иначе)
        groups:
          - groupid: "{{ zbx_groupid }}"
        interfaces:
          - type: 1        # Agent
            main: 1
            useip: 1
            ip: "{{ hostvars[zabbix_http_check_host].ansible_host | default(zabbix_http_check_host) }}"
            dns: ""
            port: "10050"
      auth: "{{ zbx_auth_token }}"
      id: 13
    status_code: 200
  register: zbx_host_create
  when: zbx_host_try.json.result | length == 0

# 4) Берём hostid для дальнейших шагов
- name: Zabbix API | Get hostid for {{ zabbix_http_check_host }} (post-create)
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers: { Content-Type: "application/json-rpc" }
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "host.get"
      params:
        output: ["hostid","host","name"]
        filter:
          host: ["{{ zabbix_http_check_host }}"]
      auth: "{{ zbx_auth_token }}"
      id: 14
    status_code: 200
  register: zbx_host
  changed_when: false

- name: Set fact hostid
  set_fact:
    zbx_hostid: "{{ (zbx_host.json.result | first).hostid }}"

# Получаем ID шаблона "Linux by Zabbix agent" и привязываем к текущему хосту
- name: Zabbix API | Get template ID (Linux by Zabbix agent)
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers: { Content-Type: "application/json-rpc" }
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "template.get"
      params:
        output: ["templateid","host"]
        filter:
          host: ["Linux by Zabbix agent"]
      auth: "{{ zbx_auth_token }}"
      id: 2201
  register: zbx_tpl_linux
  changed_when: false

- name: Fail if Linux template not found
  fail:
    msg: "В Zabbix не найден шаблон 'Linux by Zabbix agent'. Открой Configuration → Templates и сверь точное имя."
  when: (zbx_tpl_linux.json.result | length) == 0

- name: Set tpl_linux
  set_fact:
    tpl_linux: "{{ (zbx_tpl_linux.json.result | first).templateid }}"

- name: Zabbix API | Link Linux template to current host
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers: { Content-Type: "application/json-rpc" }
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "host.update"
      params:
        hostid: "{{ zbx_hostid }}"
        templates:
          - { templateid: "{{ tpl_linux }}" }
      auth: "{{ zbx_auth_token }}"
      id: 2202

# Привязываем шаблоны к ТЕКУЩЕМУ хосту (nginx-lb по его hostid)
- name: Zabbix API | Link templates to nginx-lb
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers: { Content-Type: "application/json-rpc" }
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "host.update"
      params:
        hostid: "{{ zbx_hostid }}"
        templates:
          - { templateid: "{{ tpl_linux }}" }
          # - { templateid: "{{ tpl_http }}" }
      auth: "{{ zbx_auth_token }}"
      id: 2002

- name: Zabbix API | Check if webscenario exists
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "httptest.get"
      params:
        output: ["httptestid","name"]
        hostids: ["{{ zbx_hostid }}"]
        filter:
          name: ["{{ zabbix_http_check_name }}"]
      auth: "{{ zbx_auth_token }}"
      id: 3
    status_code: 200
  register: zbx_ws
  changed_when: false

- name: Zabbix API | Create webscenario (if missing)
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "httptest.create"
      params:
        name: "{{ zabbix_http_check_name }}"
        hostid: "{{ zbx_hostid }}"
        delay: "{{ zabbix_http_check_delay }}"
        retries: 1
        steps:
          - name: "GET /"
            url: "{{ zabbix_http_check_url }}"
            timeout: "{{ zabbix_http_check_timeout }}"
            status_codes: "200"
            follow_redirects: 1
      auth: "{{ zbx_auth_token }}"
      id: 4
    status_code: 200
  register: zbx_ws_create
  when: zbx_ws.json.result | length == 0

- name: Zabbix API | Update webscenario (if exists)
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "httptest.update"
      params:
        httptestid: "{{ (zbx_ws.json.result | first).httptestid }}"
        name: "{{ zabbix_http_check_name }}"
        delay: "{{ zabbix_http_check_delay }}"
        steps:
          - name: "GET /"
            url: "{{ zabbix_http_check_url }}"
            timeout: "{{ zabbix_http_check_timeout }}"
            status_codes: "200"
            follow_redirects: 1
      auth: "{{ zbx_auth_token }}"
      id: 5
    status_code: 200
  when: zbx_ws.json.result | length > 0

#  Zabbix API (Triggers)

- name: Zabbix API | Get existing triggers for host
  uri:
    url: "{{ zabbix_api_url }}/api_jsonrpc.php"
    method: POST
    headers:
      Content-Type: "application/json-rpc"
    body_format: json
    body:
      jsonrpc: "2.0"
      method: "trigger.get"
      params:
        output: ["triggerid","description","expression","priority"]
        hostids: ["{{ zbx_hostid }}"]
      auth: "{{ zbx_auth_token }}"
      id: 103
    status_code: 200
  register: zbx_triggers
  changed_when: false

- name: Set facts for trigger expressions
  set_fact:
    zbx_expr_code: "{{ '{' ~ zabbix_http_check_host ~ ':web.test.rspcode[' ~ zabbix_http_check_name ~ '].last()}' }}<>200"
    zbx_expr_time_warn: "{{ '{' ~ zabbix_http_check_host ~ ':web.test.time[' ~ zabbix_http_check_name ~ ',GET /,resp].avg(5m)}' }}>{{ (zabbix_http_rt_warn_ms | default(2000) | int) / 1000.0 }}"
    zbx_expr_time_crit: "{{ '{' ~ zabbix_http_check_host ~ ':web.test.time[' ~ zabbix_http_check_name ~ ',GET /,resp].avg(5m)}' }}>{{ (zabbix_http_rt_crit_ms | default(5000) | int) / 1000.0 }}"

# ---- Trigger 1: HTTP code != 200 ----
- name: Ensure trigger HTTP code != 200 exists/updated
  vars:
    tr_descr: "MediaWiki Front: HTTP code is not 200"
    tr_expr: "{{ zbx_expr_code }}"
  block:
    - set_fact:
        tr_existing: "{{ (zbx_triggers.json.result | selectattr('description','equalto', tr_descr) | list) }}"
    - name: Create trigger (code!=200) if missing
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        headers:
          Content-Type: "application/json-rpc"
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "trigger.create"
          params:
            description: "{{ tr_descr }}"
            expression: "{{ tr_expr }}"
            priority: 4
          auth: "{{ zbx_auth_token }}"
          id: 104
        status_code: 200
      when: tr_existing | length == 0
    - name: Update trigger (code!=200) if exists
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        headers:
          Content-Type: "application/json-rpc"
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "trigger.update"
          params:
            triggerid: "{{ (tr_existing | first).triggerid }}"
            expression: "{{ tr_expr }}"
            priority: 4
          auth: "{{ zbx_auth_token }}"
          id: 105
        status_code: 200
      when: tr_existing | length > 0

# Trigger 2: Response time WARN
- name: Ensure trigger Response time WARN exists/updated
  vars:
    tr_descr: "MediaWiki Front: response time > {{ zabbix_http_rt_warn_ms | default(2000) }} ms (avg 5m)"
    tr_expr: "{{ zbx_expr_time_warn }}"
  block:
    - set_fact:
        tr_existing: "{{ (zbx_triggers.json.result | selectattr('description','equalto', tr_descr) | list) }}"
    - name: Create trigger (RT warn) if missing
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        headers:
          Content-Type: "application/json-rpc"
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "trigger.create"
          params:
            description: "{{ tr_descr }}"
            expression: "{{ tr_expr }}"
            priority: 3
          auth: "{{ zbx_auth_token }}"
          id: 106
        status_code: 200
      when: tr_existing | length == 0
    - name: Update trigger (RT warn) if exists
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        headers:
          Content-Type: "application/json-rpc"
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "trigger.update"
          params:
            triggerid: "{{ (tr_existing | first).triggerid }}"
            expression: "{{ tr_expr }}"
            priority: 3
          auth: "{{ zbx_auth_token }}"
          id: 107
        status_code: 200
      when: tr_existing | length > 0

# Trigger 3: Response time CRIT
- name: Ensure trigger Response time CRIT exists/updated
  vars:
    tr_descr: "MediaWiki Front: response time > {{ zabbix_http_rt_crit_ms | default(5000) }} ms (avg 5m)"
    tr_expr: "{{ zbx_expr_time_crit }}"
  block:
    - set_fact:
        tr_existing: "{{ (zbx_triggers.json.result | selectattr('description','equalto', tr_descr) | list) }}"
    - name: Create trigger (RT crit) if missing
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        headers:
          Content-Type: "application/json-rpc"
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "trigger.create"
          params:
            description: "{{ tr_descr }}"
            expression: "{{ tr_expr }}"
            priority: 4
          auth: "{{ zbx_auth_token }}"
          id: 108
        status_code: 200
      when: tr_existing | length == 0
    - name: Update trigger (RT crit) if exists
      uri:
        url: "{{ zabbix_api_url }}/api_jsonrpc.php"
        method: POST
        headers:
          Content-Type: "application/json-rpc"
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "trigger.update"
          params:
            triggerid: "{{ (tr_existing | first).triggerid }}"
            expression: "{{ tr_expr }}"
            priority: 4
          auth: "{{ zbx_auth_token }}"
          id: 109
        status_code: 200
      when: tr_existing | length > 0
