- name: Install PostgreSQL
  apt:
    name: postgresql
    state: present
    update_cache: yes

- name: Ensure PostgreSQL is running
  service:
    name: postgresql
    state: started
    enabled: true

- name: Wait for PostgreSQL socket to become available
  wait_for:
    path: /var/run/postgresql/.s.PGSQL.5432
    state: present
    timeout: 20

# üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ PostgreSQL
- name: Detect installed PostgreSQL version
  find:
    paths: /etc/postgresql
    file_type: directory
    depth: 1
    patterns: '[0-9]*'
  register: pg_version_dirs

- name: Set fact for PostgreSQL version
  set_fact:
    pg_version: "{{ pg_version_dirs.files[0].path | basename }}"

- name: Ensure PostgreSQL is running before creating wikiuser
  service:
    name: postgresql
    state: started
    enabled: true

- name: Create DB user (wikiuser)
  become: true
  shell: |
    sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='wikiuser'" | grep -q 1 || \
    sudo -u postgres psql -c "CREATE USER wikiuser WITH PASSWORD 'wikisecret' CREATEDB;"
  args:
    executable: /bin/bash

- name: Create DB (my_wiki)
  become: true
  shell: |
    sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw my_wiki || \
    sudo -u postgres createdb -O wikiuser my_wiki
  args:
    executable: /bin/bash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
- name: Configure postgresql.conf for replication
  lineinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/postgresql.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^#?wal_level', line: 'wal_level = replica' }
    - { regexp: '^#?max_wal_senders', line: 'max_wal_senders = 3' }
    - { regexp: '^#?wal_keep_size', line: 'wal_keep_size = 64' }
    - { regexp: '^#?listen_addresses', line: "listen_addresses = '*'" }
  when: "'postgres_master' in group_names"

- name: Allow replication connections in pg_hba.conf
  blockinfile:
    path: "/etc/postgresql/{{ pg_version }}/main/pg_hba.conf"
    marker: "# {mark} ANSIBLE MANAGED REPL"
    block: |
      host replication replicator {{ hostvars['pg-replica'].ansible_host }}/32 md5
  when: "'postgres_master' in group_names"

- name: Restart PostgreSQL on master
  service:
    name: postgresql
    state: restarted
  when: "'postgres_master' in group_names"

# —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ PostgreSQL —Ç–æ—á–Ω–æ –∑–∞–ø—É—â–µ–Ω
- name: Ensure PostgreSQL is running before creating replicator
  service:
    name: postgresql
    state: started
    enabled: true
  when: "'postgres_master' in group_names"

- name: Create replication user (replicator)
  become: true
  shell: |
    sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='replicator'" | grep -q 1 || \
    sudo -u postgres psql -c "CREATE USER replicator WITH REPLICATION PASSWORD 'replicate123';"
  args:
    executable: /bin/bash
  when: "'postgres_master' in group_names"

# –†–µ–ø–ª–∏–∫–∞
- name: Stop PostgreSQL on replica
  service:
    name: postgresql
    state: stopped
  when: "'postgres_replica' in group_names"

- name: Remove old PG data directory on replica
  file:
    path: "/var/lib/postgresql/{{ pg_version }}/main"
    state: absent
  when: "'postgres_replica' in group_names"

- name: Run pg_basebackup from replica
  become: true
  shell: |
    sudo -u postgres pg_basebackup -h {{ hostvars['pg-master'].ansible_host }} -D /var/lib/postgresql/{{ pg_version }}/main -U replicator -Fp -Xs -P -R
  environment:
    PGPASSWORD: replicate123
  args:
    executable: /bin/bash
  when: "'postgres_replica' in group_names"

- name: Start PostgreSQL on replica
  service:
    name: postgresql
    state: started
  when: "'postgres_replica' in group_names"
